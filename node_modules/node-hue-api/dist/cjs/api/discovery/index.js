"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.description = exports.nupnpSearch = exports.mdnsSearch = void 0;
const bridgeValidator = __importStar(require("./bridge-validation"));
const nupnp_1 = require("./nupnp");
const mDNS_1 = require("./mDNS");
function mdnsSearch(timeout) {
    const mDNSearch = new mDNS_1.mDNSSearch();
    return mDNSearch.search(timeout)
        .then((data) => {
        return loadDescriptions(data);
    });
}
exports.mdnsSearch = mdnsSearch;
function nupnpSearch() {
    return (0, nupnp_1.nupnp)().then(loadConfigurations);
}
exports.nupnpSearch = nupnpSearch;
function description(ipAddress) {
    if (!ipAddress) {
        return Promise.resolve(undefined);
    }
    return loadDescriptions([{ internalipaddress: ipAddress }])
        .then((results) => {
        return results[0];
    });
}
exports.description = description;
function loadDescriptions(results) {
    const promises = results.map(result => {
        return bridgeValidator.getBridgeDescription(result);
    });
    return Promise.all(promises);
}
function loadConfigurations(results) {
    const promises = results.map(result => {
        return bridgeValidator
            .getBridgeConfig(result)
            .then(config => {
            return {
                ipaddress: config.ipaddress,
                config: config
            };
        })
            .catch(err => {
            const error = {
                error: {
                    message: err.message,
                    description: `Failed to connect and load configuration from the bridge at ip address ${result.internalipaddress}`,
                    ipaddress: result.internalipaddress,
                    id: result.id,
                }
            };
            return {
                ipaddress: result.internalipaddress,
                error: error
            };
        });
    });
    return Promise.all(promises);
}
